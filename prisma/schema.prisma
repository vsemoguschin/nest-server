// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id         Int      @id @default(autoincrement()) 
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  

  @@index([userId])
}

// ПРОСТРАНСТВО
model WorkSpace {
  id                 Int          @id @default(autoincrement()) 
  title              String       @unique
  department         String
  deletedAt          DateTime?  // Поле для мягкого удаления
  createdAt          DateTime     @default(now())
  groups             Group[]
  users              User[]
  clients            Client[]
  deals              Deal[]
  dops               Dop[]
  payments           Payment[]
  dealSources        DealSource[]
  adSources          AdSource[]
  reports            RopReport[]
  adExpenses         AdExpense[]
  salaryPays         salaryPay[]
  salaryCorrections  salaryCorrection[]
  deliveries         Delivery[]
}


// ГРУПППА
model Group {
  id         Int        @id @default(autoincrement()) 
  title      String     
  deletedAt  DateTime?  // Поле для мягкого удаления
  createdAt  DateTime   @default(now())

  workSpaceId Int
  workSpace  WorkSpace @relation(fields: [workSpaceId], references: [id])

  users       User[]
  clients     Client[]
  deals       Deal[]
  dops        Dop[]
  payments    Payment[]
  reports     RopReport[]
  adExpenses  AdExpense[]
  adSources   AdSource[]
}

// РОЛЬ
model Role {
  id         Int        @id @default(autoincrement()) 
  shortName  String     @unique
  fullName   String
  department String // Используем enum
  deletedAt  DateTime?  // Поле для мягкого удаления
  createdAt  DateTime   @default(now())
  users      User[]
}

// ПОЛЬЗОВАТЕЛЬ
model User {
  id             Int       @id @default(autoincrement())
  fullName       String
  email          String    @unique
  password       String
  info           String    @default("")
  tg             String    @default("")
  tg_id          Int       @default(0)
  status         String    @default("")
  deletedAt  DateTime?  // Поле для мягкого удаления
  createdAt  DateTime   @default(now())

  refreshTokens  RefreshToken[]

  // Добавляем связь с ролью:
  roleId         Int
  role           Role      @relation(fields: [roleId], references: [id])
  isIntern       Boolean   @default(false)

  workSpaceId    Int
  workSpace      WorkSpace @relation(fields: [workSpaceId], references: [id])

  groupId        Int
  group          Group     @relation(fields: [groupId], references: [id])

  clients        Client[] // Один пользователь может иметь много клиентов
  deals          Deal[] // Один пользователь может иметь много сделок
  dealSales      DealUser[]
  dealAudit      DealAudit[]

  payments       Payment[]

  dops           Dop[]

  deliveries     Delivery[]

  reviews        Review[]

  managersPlans  ManagersPlan[]

  managerReports ManagerReport[]

  salaryPays     salaryPay[]

  salaryCorrections salaryCorrection[]

  masterReports   MasterReport[]
  masterRepairReports   MasterRepairReport[]
  packerReports   PackerReport[]
  masterShifts    MasterShift[]
  packerShifts    PackerShift[]
  logistShifts    LogistShift[]
  otherReport     OtherReport[]
  frezerReports   FrezerReport[]

  // Канбан
  boards        Board[]            @relation("BoardUsers")
  tasks         KanbanTask[]       @relation("TaskMembers")
  createdTasks  KanbanTask[]       @relation("TaskCreator")

  comments      KanbanTaskComments[]
  audits        KanbanTaskAudit[]
  uploadedFiles KanbanFile[]       @relation("KanbanFileUploader")
}
model ManagersPlan {
  id         Int        @id @default(autoincrement()) 
  period     String // Если нужен только год-месяц, можно хранить как DateTime (например, первый день месяца)
  plan       Int        @default(0)
  deletedAt  DateTime?  // Поле для мягкого удаления
  createdAt  DateTime   @default(now())
  
  // Связь с пользователем (для которого создаётся план)
  userId  Int      
  user    User          @relation(fields: [userId], references: [id])
  // Убираем @unique, чтобы один пользователь мог иметь несколько планов
}

model ManagerReport {
  id             Int     @id @default(autoincrement())
  calls          Int     @default(0)
  makets         Int     @default(0)
  maketsDayToDay Int     @default(0)
  date           String
  period         String  @default("")
  redirectToMSG  Int     @default(0) //new
  shiftCost      Float   @default(666.67)

  userId         Int
  user           User    @relation(fields: [userId], references: [id])
}

model RopReport {
  id             Int    @id @default(autoincrement())
  calls          Int    @default(0)
  makets         Int    @default(0)
  maketsDayToDay Int    @default(0) //new
  redirectToMSG  Int    @default(0) //new
  date           String
  period         String @default("")

  workSpaceId         Int
  workSpace           WorkSpace  @relation(fields: [workSpaceId], references: [id])

  groupId         Int?
  group           Group?  @relation(fields: [groupId], references: [id])
}
// Суммы выплат
model salaryPay {
  id             Int    @id @default(autoincrement())
  date           String @default("")
  period         String @default("")
  price          Int
  status         String

  userId         Int
  user           User   @relation(fields: [userId], references: [id])

  workSpaceId    Int
  workSpace      WorkSpace @relation(fields: [workSpaceId], references: [id])
}

// Корректировка зарплаты(штрафы/бонусы)
model salaryCorrection {
  id             Int    @id @default(autoincrement())
  date           String @default("")
  period         String @default("")
  price          Int
  type           String // Штраф/Бонус
  description    String @default("")
  
  userId         Int
  user           User   @relation(fields: [userId], references: [id])

  workSpaceId    Int
  workSpace      WorkSpace @relation(fields: [workSpaceId], references: [id])
}

// КЛИЕНТ
model Client {
  id           Int       @id @default(autoincrement())
  fullName     String // Имя клиента
  phone        String // Номер телефона
  chatLink     String    @unique // Ссылка на чат
  adLink       String    @default("") // Ссылка на объявление
  gender       String // Пол
  type         String // Тип клиента
  inn          String    @default("") // ИНН
  info         String    @default("") // Информация
  firstContact String // Дата первого контакта
  isRegular    Boolean   @default(false)
  deletedAt    DateTime?  // Поле для мягкого удаления
  createdAt    DateTime  @default(now())

  // Внешний ключ для связи с пользователем
  workSpaceId  Int
  workSpace    WorkSpace @relation(fields: [workSpaceId], references: [id])

  // Внешний ключ для связи с пользователем
  groupId      Int
  group        Group     @relation(fields: [groupId], references: [id])

  // Внешний ключ для связи с пользователем
  userId       Int
  user         User      @relation(fields: [userId], references: [id])

  // Связь со сделками:
  deals        Deal[] // Один пользователь может иметь много сделок
}


//--СДЕЛКА---------------------------------------------------------
model Deal {
  id                Int        @id @default(autoincrement())
  saleDate          String     // Дата продажи (обязательное поле)
  card_id           String      // ID карточки дизайна
  title             String     // Название сделки
  price             Int        // Стоимость
  status            String     @default("Создана") // Допустимые значения: "Создана", "Изготовление", "Готов", "Готов к отправке", "Отправлена", "Вручена"
  clothingMethod    String     // Метод закрытия (clothingMethod)
  description       String     @default("") // Описание сделки
  source            String     // Источник сделки
  adTag             String     // ТЕГ
  discont           String     // Скидка. Допустимые значения: "Без скидки", "Желтая", "ОПТ", "Рассылка", "Красная"
  sphere            String     @default("") // Сфера деятельности
  city              String     @default("") // Город
  region            String     @default("") // Регион
  paid              Boolean    @default(false) // Оплачена?
  maketType         String     @default("") // Тип макета. Допустимые значения: "Дизайнерский", "Заготовка из базы", "Рекламный", "Визуализатор", "Из рассылки"
  category          String     @default("")
  maketPresentation String     // Дата презентации макета
  period            String     @default("") // Период, например "2025-02"; значение можно вычислять на уровне приложения
  deletedAt         DateTime?  // Поле для мягкого удаления
  createdAt         DateTime   @default(now())
  reservation       Boolean    @default(false) // Бронь

  courseType        String     @default("")
  discontAmount     Int        @default(0)

  // Внешний ключ для связи с пространством
  workSpaceId       Int
  workSpace         WorkSpace  @relation( fields: [workSpaceId], references: [id])

  // Внешний ключ для связи с группой
  groupId           Int
  group             Group      @relation( fields: [groupId], references: [id])

  // Внешний ключ для связи с пользователем (создателем сделки)
  userId            Int
  user              User       @relation( fields: [userId], references: [id])
  dealers           DealUser[]

  // Внешний ключ для связи с клиентом
  clientId          Int
  client            Client     @relation( fields: [clientId], references: [id])

  payments          Payment[]

  dops              Dop[]

  deliveries        Delivery[]

  reviews            Review[]

  // orders            Order[]
  orders            TaskOrder[]

  statusHistory     DealStatusHistory[]
  audit             DealAudit[]

  masterReports         MasterReport[]
  masterRepairReports   MasterRepairReport[]
  packerReports         PackerReport[]
}

// История изменения статуса
model DealStatusHistory {
  id         Int         @id @default(autoincrement()) 
  status     String
  changedAt  DateTime    @default(now())
  comment    String?     

  dealId     Int
  deal       Deal        @relation(fields: [dealId], references: [id])
}
// История изменений сделки
model DealAudit {
  id        Int      @id @default(autoincrement()) 
  action    String   // Описание действия, например, "Статус изменён", "Данные обновлены"
  comment   String?  // Дополнительный комментарий (если требуется)
  createdAt DateTime @default(now())

  dealId    Int      // ID сделки, к которой относится аудит
  deal      Deal     @relation(fields: [dealId], references: [id])

  userId    Int?     // ID пользователя, который совершил действие (опционально)
  user      User?    @relation(fields: [userId], references: [id])
}

// Источники сделок
model AdSource {
  id           Int           @id @default(autoincrement()) 
  title        String        @unique
  adExpenses   AdExpense[]

  // Внешний ключ для связи с пространством
  workSpaceId  Int
  workSpace    WorkSpace  @relation( fields: [workSpaceId], references: [id])

  groupId       Int?
  group         Group?  @relation(fields: [groupId], references: [id])
}

// Источники сделок
model DealSource {
  id           Int           @id @default(autoincrement()) 
  title        String        @unique

  // Внешний ключ для связи с пространством
  workSpaceId  Int
  workSpace    WorkSpace  @relation( fields: [workSpaceId], references: [id])
}

// расходы на рекламу
model AdExpense {
  id            Int        @id @default(autoincrement())
  price         Int        @default(0)
  date          String
  period        String     @default("")

  adSourceId    Int
  adSource      AdSource   @relation(fields: [adSourceId], references: [id])

  workSpaceId   Int
  workSpace     WorkSpace  @relation( fields: [workSpaceId], references: [id])

  groupId       Int?
  group         Group?  @relation(fields: [groupId], references: [id])
}

// Методы закрытия
model ClothingMethod {
  id     Int     @id @default(autoincrement()) 
  title  String  @unique
}
// Рекламные теги
model AdTag {
  id     Int     @id @default(autoincrement()) 
  title  String  @unique
}
// Сферы деятельности
model Sphere {
  id     Int     @id @default(autoincrement()) 
  title  String  @unique
}
//-----------------------------------------------------------------

// ДИЛЕРЫ
model DealUser {
  id        Int    @id @default(autoincrement()) 
  price     Int    // Сумма
  idx       Int    @default(0)// Индекс (для сортировки)

  dealId    Int
  deal      Deal   @relation(fields: [dealId], references: [id])

  userId    Int
  user      User   @relation(fields: [userId], references: [id])

  @@unique([dealId, userId])
}

// ПЛАТЕЖИ
model Payment {
  id           Int         @id @default(autoincrement()) 
  title        String      // Назначение платежа
  price        Int         // Сумма
  date         String      // Дата отплаты (можно заменить на DateTime, если потребуется)
  method       String      // Способ оплаты
  description  String      @default("") // Описание
  reservation  Boolean     @default(false) // Бронь
  period       String      @default("") // Период (например, "2025-02"). Логику установки значения по умолчанию лучше делать на уровне приложения
  stutus       String      @default("") 
  paymentId    String      @default("")
  isConfirmed  Boolean     @default(true)
  terminal     String      @default("")

  // Связи 
  userId       Int
  user         User       @relation(fields: [userId], references: [id])

  dealId       Int
  deal         Deal       @relation(fields: [dealId], references: [id])

  workSpaceId  Int
  workspace    WorkSpace  @relation(fields: [workSpaceId], references: [id])

  groupId           Int?
  group             Group?      @relation( fields: [groupId], references: [id])
}


// ДОП. УСЛУГИ
model Dop {
  id          Int      @id @default(autoincrement()) 
  saleDate    String   // Дата продажи (можно заменить на DateTime, если требуется)
  type        String   // Тип допа (можно изменить на внешний ключ к DopsTypes, если нужно)
  price       Int      // Стоимость
  description String   @default("")
  period      String   @default("") // Период, например "2025-02". Значение задается приложением

  // Отношения:
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  dealId      Int
  deal        Deal     @relation(fields: [dealId], references: [id])
  
  workSpaceId      Int
  workSpace        WorkSpace     @relation(fields: [workSpaceId], references: [id])

  groupId           Int?
  group             Group?      @relation( fields: [groupId], references: [id])
}
// Типы допов
model DopsType {
  id    Int    @id @default(autoincrement()) 
  title String @unique
}

// ДОСТАВКИ
model Delivery {
  id             Int     @id @default(autoincrement()) 
  date           String  @default("")
  method         String  @default("")
  type           String  @default("")
  description    String  @default("")
  track          String  @default("")
  status         String  @default("")
  price          Float   @default(0)
  deliveredDate  String  @default("") // Дата доставки

  dealId         Int
  deal           Deal    @relation(fields: [dealId], references: [id])

  workSpaceId    Int?
  workSpace      WorkSpace?    @relation(fields: [workSpaceId], references: [id])

  userId         Int?
  user           User?   @relation(fields: [userId], references: [id])
}

// ОТЗЫВЫ
model Review {
  id      Int     @id @default(autoincrement()) 
  date    String  // Обязательное поле "дата отзыва"

  userId  Int
  user    User    @relation(fields: [userId], references: [id])

  dealId  Int
  deal    Deal    @relation(fields: [dealId], references: [id])
  
  // fileId  Int
  // file    File    @relation(fields: [fileId], references: [id])
  file    File[]
}

model File {
  id        Int      @id @default(autoincrement()) 
  name      String   @default("")
  ya_name   String   @default("")
  size      Int      @default(0)
  preview   String   @default("")
  path      String   @default("")
  directory String   @default("")

  reviewId  Int        // Связь с отзывом
  review    Review  @relation(fields: [reviewId], references: [id])
}




model Supplie {
  id              Int      @id @default(autoincrement())
  date            String  
  shipmentDate    String  @default("")
  supplier        String  //поставщик
  paymentMethod   String  //счет, перевод, наличка
  orderStatus     String  //Оформлен заказ, В пути, Отгружен нам
  paymentStatus   String  //Оплачен, Не оплачен
  deliveryMethod  String  //Сдек, Самовывоз, Доставка от поставщика, Курьерская доставка
  invoice         String?
  track           String?
  positions       SuppliePosition[]
}

model SuppliePosition {
  id              Int      @id @default(autoincrement())
  name            String
  priceForItem    Float
  quantity        Int
  category        String  @default("")

  supplieId       Int
  supplie         Supplie  @relation(fields: [supplieId], references: [id])
}

model Suppliers {
  id      Int      @id @default(autoincrement())
  name    String   @unique
}

model SuppliesCategories  {
  id    Int      @id @default(autoincrement())
  name  String
}

model MasterRepairReport {
  id            Int      @id @default(autoincrement())
  date          String
  name          String
  grinding      Int    @default(0)  //Шлифовка 350р
  unpackage     Int    @default(0)  //Распаковка стандарт 50
  unpackageBig  Int    @default(0)  //Распаковка большая 100
  smartContr    Int    @default(0)  //замена смарт контроллера 200
  acoustics     Int    @default(0)  //Акустика 150
  metrs         Float  @default(0)  //замена неона 130
  els           Int    @default(0)  //замена элемента 70
  penaltyCost   Int    @default(0)

  type          String // Стандарт/Уличная/Смарт/РГБ
  cost          Int
  isPenalty     Boolean  @default(false)
  comment       String   @default("")

  userId     Int
  user       User    @relation(fields: [userId], references: [id])

  dealId     Int?
  deal       Deal?   @relation(fields: [dealId], references: [id])
}

model MasterReport {
  id           Int      @id @default(autoincrement())
  date         String
  name         String
  metrs        Float
  els          Int
  type         String
  cost         Int
  penaltyCost  Int      @default(0)
  isPenalty    Boolean  @default(false)
  comment      String   @default("")

  userId     Int
  user       User    @relation(fields: [userId], references: [id])

  dealId     Int?
  deal       Deal?   @relation(fields: [dealId], references: [id])
}

model PackerReport {
  id           Int      @id @default(autoincrement())
  date         String
  name         String
  overSize     Boolean //Не размер
  isGift       Boolean //Не размер
  items        Int     //количество вывесок в заказе
  adapters     Int      @default(0)
  lam          Int      @default(0)
  cost         Int
  dimmers      Int  //количество диммеров
  dops         Int      @default(0)
  dopsComment  String   @default("")

  isPenalty  Boolean  @default(false)
  comment    String   @default("")
  penaltyCost  Int      @default(0)

  userId       Int
  user         User    @relation(fields: [userId], references: [id])

  dealId       Int?
  deal         Deal?   @relation(fields: [dealId], references: [id])
}

model MasterShift {
  id          Int     @id @default(autoincrement())
  shift_date  String //2025-05-01

  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

model PackerShift {
  id          Int     @id @default(autoincrement())
  shift_date  String //2025-05-01

  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

model LogistShift {
  id          Int     @id @default(autoincrement())
  shift_date  String //2025-05-01
  cost        Int    @default(0)

  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

model OtherReport {
  id           Int     @id @default(autoincrement())
  date         String //2025-05-01
  name         String
  cost         Int
  penaltyCost  Int      @default(0)

  userId       Int
  user         User    @relation(fields: [userId], references: [id])
}

model FrezerReport {
  id           Int      @id @default(autoincrement())
  date         String
  items        Int     @default(0)
  sheets       Int     @default(0)
  remake       Int     @default(0)
  hours        Int     @default(0)
  cost         Int     @default(0)
  square       Float   @default(0)
  comment      String  @default("")
  penaltyCost  Int     @default(0)

  userId       Int
  user         User    @relation(fields: [userId], references: [id])
}

//планфакт ----------
model ExpenseCategory {
  id                     Int                @id @default(autoincrement())
  name                   String
  type                   String             // Тип категории: Доходы, Расходы, Активы, Обязательства, Капитал
  description            String?
  parentId               Int?               // ID родительской категории (если есть)
  parent                 ExpenseCategory?   @relation("CategoryRelation", fields: [parentId], references: [id], onDelete: SetNull)
  children               ExpenseCategory[]  @relation("CategoryRelation")
  // operations             Operation[]        // Операции, связанные с категорией (только для листовых категорий)
  counterPartiesIncome   CounterParty[]     @relation("CounterPartyIncome")
  counterPartiesOutcome  CounterParty[]     @relation("CounterPartyOutcome")

  operationPositions     OperationPosition[]

  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
}

model PlanFactAccount {
  id                Int      @id @default(autoincrement()) 
  name              String   // Название
  accountNumber     String   @unique // Номер счета
  balance           Float    @default(0) // Остаток
  type              String   @default("") // безналичны/наличный
  balanceStartDate  String   @default("") // date
  comment           String   @default("") // коментарий
  isReal            Boolean  @default(true) // есть доступ по АПИ

  operations        Operation[]
}

model Operation {
  id                 Int       @id @default(autoincrement())
  operationId        String    @unique
  operationDate      String
  operationDateTime  DateTime
  typeOfOperation    String    @default("")
  operationType      String    @default("")
  category           String    @default("")
  description        String    @default("")
  payPurpose         String    @default("")
  // accountAmount      Float
  isCreated          Boolean   @default(false)

  // expenseCategoryId  Int?            // Связь с категорией (только листовая категория)
  // expenseCategory    ExpenseCategory?  @relation(fields: [expenseCategoryId], references: [id])

  accountId          Int
  account            PlanFactAccount   @relation(fields: [accountId], references: [id])

  // counterPartyId     Int?
  // counterParty       CounterParty?      @relation(fields: [counterPartyId], references: [id])

  operationPositions OperationPosition[]

  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
}

model CounterParty {
  id                 Int               @id @default(autoincrement())
  title              String
  type               String  @default("") // Плательщик/Получатель/Смешанный
  inn                String  @default("")
  kpp                String  @default("")
  account            String  @default("")
  bankBic            String  @default("")
  bankName           String  @default("")
  contrAgentGroup    String  @default("") // Банки/Гос. органы/Клиенты/Поставщики/Сотрудники 

  // operations         Operation[]
  operationPositions OperationPosition[]

  incomeExpenseCategoryId   Int?            // Связь с категорией для входящих операций
  incomeExpenseCategory     ExpenseCategory?  @relation("CounterPartyIncome", fields: [incomeExpenseCategoryId], references: [id])
  outcomeExpenseCategoryId  Int?            // Связь с категорией для исходящих операций
  outcomeExpenseCategory    ExpenseCategory?  @relation("CounterPartyOutcome", fields: [outcomeExpenseCategoryId], references: [id])
}

model OperationPosition {
  id                 Int               @id @default(autoincrement())
  amount             Float

  operationId        Int?            // Связь с операцией
  operation          Operation?  @relation(fields: [operationId], references: [id])

  counterPartyId     Int?
  counterParty       CounterParty?      @relation(fields: [counterPartyId], references: [id])

  expenseCategoryId  Int?            // Связь с категорией
  expenseCategory    ExpenseCategory?  @relation(fields: [expenseCategoryId], references: [id])
}

//// ========= BOARD =========
model Board {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  columns     Column[]
  tasks       KanbanTask[]
  tags        KanbanTaskTags[]

  // участники доски (многие-ко-многим)
  users       User[]       @relation("BoardUsers")

  @@index([deletedAt])
  // При необходимости уникальности названия в рамках рабочего пространства:
  // @@unique([workspaceId, title])
}

//// ========= COLUMN =========
model Column {
  id         Int        @id @default(autoincrement())
  title      String
  position   Decimal     @db.Decimal(10, 4) // порядок в доске (drag & drop)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  tasks      KanbanTask[]

  boardId    Int
  board      Board       @relation(fields: [boardId], references: [id], onDelete: Restrict)

  @@index([boardId, position])
  @@index([deletedAt])
  // Если нужно запретить одинаковые названия колонок внутри одной доски:
  // @@unique([boardId, title])
}

//// ========= KANBAN TASK =========
model KanbanTask {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @default("")
  position     Decimal    @db.Decimal(10, 4) // порядок внутри колонки
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  cover        String?
  chatLink     String?

  // участники и создатель
  members      User[]     @relation("TaskMembers")
  creatorId    Int
  creator      User      @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Restrict)

  // вложения канбана (через связующую таблицу)
  attachments  KanbanTaskAttachment[]
  orders       TaskOrder[]

  comments     KanbanTaskComments[]
  tags         KanbanTaskTags[] @relation("TaskTags")
  audits       KanbanTaskAudit[]

  boardId      Int
  board        Board      @relation(fields: [boardId], references: [id], onDelete: Restrict)

  columnId     Int
  column       Column     @relation(fields: [columnId], references: [id], onDelete: Restrict)

  @@index([boardId, columnId, position])
  @@index([deletedAt])
  // Если нужно ограничить дубликаты названий в пределах доски:
  // @@unique([boardId, title])
}

//// ========= COMMENTS =========
model KanbanTaskComments {
  id        Int         @id @default(autoincrement())
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  authorId  Int
  author    User       @relation(fields: [authorId], references: [id], onDelete: Restrict)

  taskId    Int
  task      KanbanTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  files     KanbanFile[]

  @@index([taskId, createdAt])
  @@index([deletedAt])
}

//// ========= TAGS =========
model KanbanTaskTags {
  id        Int         @id @default(autoincrement())
  name      String
  color     String      @default("")
  createdAt DateTime    @default(now())

 // Связь многие-ко-многим с задачами
  tasks     KanbanTask[] @relation("TaskTags")

  boardId    Int
  board      Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  // запрет дубликата одинакового тега в пределах одной доски
  @@unique([boardId, name]) 
}

//// ========= AUDIT =========
model KanbanTaskAudit {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())

  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Restrict)

  taskId    Int
  task      KanbanTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  action    String      // примеры: CREATE, UPDATE_TITLE, MOVE, ADD_MEMBER
  payload   Json?       // произвольные данные (fromColumnId, toColumnId, fieldsChanged, ...)

  @@index([taskId, createdAt])
}

//// ========= KANBAN FILE (ОТДЕЛЬНО ОТ ТВОЕЙ File) =========
model KanbanFile {
  id           Int         @id @default(autoincrement())
  name         String      @default("")
  ya_name      String      @default("")
  size         Int         @default(0)
  preview      String      @default("") // URL превью, если есть
  path         String      @default("") // полный URL/путь
  directory    String      @default("")
  mimeType     String?
  file         String?

  createdAt    DateTime    @default(now())
  deletedAt    DateTime?

  uploadedById Int
  uploadedBy   User       @relation("KanbanFileUploader", fields: [uploadedById], references: [id], onDelete: Restrict)

  taskLinks    KanbanTaskAttachment[]

  commentId    Int?                       // ← делает связь опциональной
  comment      KanbanTaskComments? @relation(fields: [commentId], references: [id], onDelete: SetNull)

  @@index([deletedAt])
  @@index([uploadedById])
  // Если ключ в облаке уникален, можно включить:
  // @@unique([ya_name])
}

//// ========= ATTACHMENT (TASK ↔ FILE) =========
model KanbanTaskAttachment {
  id        Int         @id @default(autoincrement())
  taskId    Int
  fileId    Int
  task      KanbanTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  file      KanbanFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@unique([taskId, fileId]) // не даём прикрепить один и тот же файл к задаче повторно
  @@index([taskId])
  @@index([fileId])
}


model TaskOrder {
  id             Int             @id @default(autoincrement()) 
  title          String          @default("")    // Название заказа
  deadline       String          @default("")    // Дедлайн формат 2025-08-24
  material       String          @default("")    // Материал подложки
  boardWidth     Int             @default(0)     // Ширина подложки
  boardHeight    Int             @default(0)     // Высота подложки
  holeType       String          @default("")    // Диаметр отверстий
  stand          Boolean         @default(false) // Подставка
  laminate       String          @default("")    // Пленка
  print          Boolean         @default(false) // Печать
  printQuality   Boolean         @default(false) // Качество печати
  acrylic        String          @default("")    // Акрил
  type           String          @default("")    // Тип (Помещение/Улица)
  wireLength     String          @default("")    // Длина акустического провода
  elements       Int             @default(0)     // Количество элементов
  gift           Boolean         @default(false) // Подарок
  adapter        String          @default("")    // Блок (например, Помещение, Уличный, Нет)
  plug           String          @default("")    // Вилка
  fitting        String          @default("")    // Крепления
  dimmer         Boolean         @default(false) // Диммер
  giftPack       Boolean         @default(false) // Подарочная упаковка
  description    String          @default("")    // Описание
  deletedAt      DateTime?                       // Для мягкого удаления

  neons          Neon[]
  lightings      Lighting[]

  dealId     Int?
  deal       Deal?        @relation(fields: [dealId], references: [id])

  taskId     Int
  task       KanbanTask        @relation(fields: [taskId], references: [id])

}

// НЕОН
model Neon {
  id        Int         @id @default(autoincrement()) 
  width     String      @default("")
  length    Int         @default(0)// Длина неона
  color     String      @default("")// Цвет неона

  // Связь с заказом (TaskOrder)
  orderTaskId   Int
  orderTask     TaskOrder       @relation(fields: [orderTaskId], references: [id])
}
// НЕОН
model Lighting {
  id        Int         @id @default(autoincrement()) 
  length    Int         @default(0)// Длина неона
  color     String      @default("")// Цвет неона
  elements  Int         @default(0) // Количество элементов

  // Связь с заказом (TaskOrder)
  orderTaskId   Int
  orderTask     TaskOrder       @relation(fields: [orderTaskId], references: [id])
}