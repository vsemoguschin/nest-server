import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
  const from = process.argv[2] || null; // YYYY-MM-DD
  const to = process.argv[3] || null; // YYYY-MM-DD

  console.log('üîç –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ—Å—Ç–∞–≤–æ–∫...\n');

  if (from && to) {
    console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: —Å ${from} –ø–æ ${to}\n`);
  } else if (from) {
    console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: —Å ${from}\n`);
  } else if (to) {
    console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: –¥–æ ${to}\n`);
  } else {
    console.log('üìÖ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)\n');
  }

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    const operationDateFilter: Record<string, string> = {};
    if (from) {
      operationDateFilter.gte = from;
    }
    if (to) {
      operationDateFilter.lte = to;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const operations = await prisma.originalOperationFromTbank.findMany({
      where:
        Object.keys(operationDateFilter).length > 0
          ? {
              operationDate: operationDateFilter,
            }
          : {},
      include: {
        account: {
          select: {
            id: true,
            name: true,
            accountNumber: true,
          },
        },
        operationPositions: {
          include: {
            counterParty: {
              select: {
                id: true,
                title: true,
              },
            },
            expenseCategory: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
        // supplie: {
        //   select: {
        //     id: true,
        //     supplier: true,
        //     date: true,
        //     paymentStatus: true,
        //   },
        // },
      },
      orderBy: {
        operationDate: 'desc',
      },
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫
    const supplieDateFilter: Record<string, string> = {};
    if (from) {
      supplieDateFilter.gte = from;
    }
    if (to) {
      supplieDateFilter.lte = to;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç–∞–≤–∫–∏
    const supplies = await prisma.supplie.findMany({
      where:
        Object.keys(supplieDateFilter).length > 0
          ? {
              date: supplieDateFilter,
            }
          : {},
      include: {
        positions: true,
      },
      orderBy: {
        date: 'desc',
      },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤–æ–∫: ${supplies.length}\n`);

    if (operations.length === 0 && supplies.length === 0) {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    const operationsByAccount = operations.reduce(
      (acc, op) => {
        const accountName = op.account.name;
        if (!acc[accountName]) {
          acc[accountName] = [];
        }
        acc[accountName].push(op);
        return acc;
      },
      {} as Record<string, typeof operations>,
    );

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:');
    Object.entries(operationsByAccount).forEach(([accountName, ops]) => {
      const totalAmount = ops.reduce((sum, op) => sum + op.accountAmount, 0);
      const creditOps = ops.filter(
        (op) => op.typeOfOperation === 'Credit',
      ).length;
      const debitOps = ops.filter(
        (op) => op.typeOfOperation === 'Debit',
      ).length;
      // const withSupplies = ops.filter((op) => op.supplie).length;

      console.log(`  ${accountName}:`);
      console.log(`    –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${ops.length}`);
      console.log(`    –ü—Ä–∏—Ö–æ–¥–Ω—ã–µ: ${creditOps}, –†–∞—Å—Ö–æ–¥–Ω—ã–µ: ${debitOps}`);
      // console.log(`    –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏: ${withSupplies}`);
      console.log(`    –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} —Ä—É–±.`);
      console.log('');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º
    if (supplies.length > 0) {
      console.log('üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º:');

      const totalPositions = supplies.reduce(
        (sum, supply) => sum + supply.positions.length,
        0,
      );
      const totalAmount = supplies.reduce(
        (sum, supply) =>
          sum +
          supply.positions.reduce(
            (posSum, pos) => posSum + pos.priceForItem * pos.quantity,
            0,
          ),
        0,
      );

      const suppliersStats = supplies.reduce(
        (acc, supply) => {
          acc[supply.supplier] = (acc[supply.supplier] || 0) + 1;
          return acc;
        },
        {} as Record<string, number>,
      );

      const paymentStatusStats = supplies.reduce(
        (acc, supply) => {
          acc[supply.paymentStatus] = (acc[supply.paymentStatus] || 0) + 1;
          return acc;
        },
        {} as Record<string, number>,
      );

      console.log(`  –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–æ–∫: ${supplies.length}`);
      console.log(`  –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: ${totalPositions}`);
      console.log(`  –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} —Ä—É–±.`);
      console.log('');

      console.log('  –¢–æ–ø-5 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:');
      Object.entries(suppliersStats)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5)
        .forEach(([supplier, count]) => {
          console.log(`    ${supplier}: ${count} –ø–æ—Å—Ç–∞–≤–æ–∫`);
        });
      console.log('');

      console.log('  –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:');
      Object.entries(paymentStatusStats).forEach(([status, count]) => {
        console.log(`    ${status}: ${count} –ø–æ—Å—Ç–∞–≤–æ–∫`);
      });
      console.log('');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:');
    console.log('='.repeat(120));

    operations.slice(0, 10).forEach((op, index) => {
      console.log(
        `${index + 1}. ${op.operationDate} | ${op.typeOfOperation} | ${op.accountAmount.toFixed(2)} —Ä—É–±.`,
      );
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${op.description}`);
      console.log(`   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ${op.counterPartyTitle}`);
      console.log(
        `   –ê–∫–∫–∞—É–Ω—Ç: ${op.account.name} (${op.account.accountNumber})`,
      );

      if (op.expenseCategoryName) {
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${op.expenseCategoryName}`);
      }

      // if (op.supplie) {
      //   console.log(
      //     `   üì¶ –°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞: ${op.supplie.supplier} (${op.supplie.date})`,
      //   );
      // }

      if (op.operationPositions.length > 0) {
        console.log(`   –ü–æ–∑–∏—Ü–∏–π: ${op.operationPositions.length}`);
        op.operationPositions.forEach((pos, posIndex) => {
          console.log(`     ${posIndex + 1}. ${pos.amount.toFixed(2)} —Ä—É–±.`);
          if (pos.counterParty) {
            console.log(`        –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ${pos.counterParty.title}`);
          }
          if (pos.expenseCategory) {
            console.log(`        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${pos.expenseCategory.name}`);
          }
        });
      }

      console.log(`   ID –æ–ø–µ—Ä–∞—Ü–∏–∏: ${op.operationId}`);
      console.log('-'.repeat(120));
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–∞–≤–æ–∫
    if (supplies.length > 0) {
      console.log('\nüì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–∞–≤–æ–∫:');
      console.log('='.repeat(120));

      supplies.slice(0, 10).forEach((supply, index) => {
        const totalAmount = supply.positions.reduce(
          (sum, pos) => sum + pos.priceForItem * pos.quantity,
          0,
        );

        console.log(`${index + 1}. ${supply.date} | ${supply.supplier}`);
        console.log(`   –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${supply.orderStatus}`);
        console.log(`   –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${supply.paymentStatus}`);
        console.log(`   –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${supply.deliveryMethod}`);
        console.log(`   –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${supply.paymentMethod}`);
        console.log(`   –ü–æ–∑–∏—Ü–∏–π: ${supply.positions.length}`);
        console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} —Ä—É–±.`);

        if (supply.invoice) {
          console.log(`   –°—á–µ—Ç: ${supply.invoice}`);
        }
        if (supply.track) {
          console.log(`   –¢—Ä–µ–∫: ${supply.track}`);
        }

        if (supply.positions.length > 0) {
          console.log('   –ü–æ–∑–∏—Ü–∏–∏:');
          supply.positions.forEach((pos, posIndex) => {
            const posTotal = pos.priceForItem * pos.quantity;
            console.log(
              `     ${posIndex + 1}. ${pos.name} - ${pos.quantity} —à—Ç. √ó ${pos.priceForItem.toFixed(2)} —Ä—É–±. = ${posTotal.toFixed(2)} —Ä—É–±.`,
            );
            if (pos.category) {
              console.log(`        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${pos.category}`);
            }
          });
        }

        console.log(`   ID –ø–æ—Å—Ç–∞–≤–∫–∏: ${supply.id}`);
        console.log('-'.repeat(120));
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = operations.reduce(
      (acc, op) => {
        if (op.expenseCategoryName) {
          acc[op.expenseCategoryName] = (acc[op.expenseCategoryName] || 0) + 1;
        }
        return acc;
      },
      {} as Record<string, number>,
    );

    if (Object.keys(categoryStats).length > 0) {
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
      Object.entries(categoryStats)
        .sort(([, a], [, b]) => b - a)
        .forEach(([category, count]) => {
          console.log(`  ${category}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
    const counterpartyStats = operations.reduce(
      (acc, op) => {
        acc[op.counterPartyTitle] = (acc[op.counterPartyTitle] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    );

    console.log('\nüë• –¢–æ–ø-10 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤:');
    Object.entries(counterpartyStats)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .forEach(([counterparty, count]) => {
        console.log(`  ${counterparty}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      });

    // –û–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const operationsWithoutCategories = operations.filter(
      (op) => !op.expenseCategoryName,
    );
    if (operationsWithoutCategories.length > 0) {
      console.log(
        `\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${operationsWithoutCategories.length}`,
      );
    }

    // –û–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π
    const operationsWithoutPositions = operations.filter(
      (op) => op.operationPositions.length === 0,
    );
    if (operationsWithoutPositions.length > 0) {
      console.log(
        `‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π: ${operationsWithoutPositions.length}`,
      );
    }

    console.log('\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main().catch((e) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
  process.exit(1);
});
