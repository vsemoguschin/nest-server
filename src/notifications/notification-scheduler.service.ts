import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule'; // –ò–º–ø–æ—Ä—Ç –¥–ª—è cron
import { PrismaService } from '../prisma/prisma.service';
import { TelegramService } from 'src/services/telegram.service';
import { BluesalesImportService } from '../integrations/bluesales/bluesales-import.service';

@Injectable()
export class NotificationSchedulerService {
  private readonly logger = new Logger(NotificationSchedulerService.name);
  private readonly env = process.env.NODE_ENV as 'development' | 'production';

  constructor(
    private readonly prisma: PrismaService,
    private readonly telegramService: TelegramService, // –ò–Ω–∂–µ–∫—Ç–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
    private readonly bluesalesImport: BluesalesImportService,
  ) {}

  private async notifyAdmins(text: string) {
    // Send only in production to avoid spam in dev
    if (this.env !== 'production') return;
    const adminIds = [317401874];
    for (const id of adminIds) {
      try {
        await this.telegramService.sendToChat(id, text);
      } catch (e: any) {
        this.logger.error(`Failed to notify ${id}: ${e?.message || e}`);
      }
    }
  }

  // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  // @Cron('0 0 15,18,21,23 * * *')
  @Cron('0 59 14,17,20,23 * * *')
  async sendDailySummary() {
    this.logger.log('Starting daily data collection and notification...');
    if (this.env === 'development') {
      this.logger.debug(`[dev] skip telegram`);
      return;
    }

    try {
      const today = new Date().toISOString().slice(0, 10);

      const groups = await this.prisma.group.findMany({
        where: {
          workSpace: {
            department: 'COMMERCIAL',
          },
        },
        include: {
          deals: {
            where: {
              saleDate: {
                startsWith: today,
              },
              reservation: false,
            },
            include: {
              dops: true,
            },
          },
          adExpenses: {
            where: {
              date: {
                startsWith: today,
              },
            },
          },
        },
      });

      const msgs = groups.map((g) => {
        const projectName = g.title;
        const dealsSales = g.deals.reduce((a, b) => a + b.price, 0);
        const dopsSales = g.deals
          .flatMap((d) => d.dops)
          .reduce((a, b) => a + b.price, 0);
        const totalSales = dealsSales + dopsSales;
        // const adExpenses = g.adExpenses.reduce((a, b) => a + b.price, 0);
        const text =
          `\n<u>${projectName}</u>\n` +
          `–°—É–º–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö: ${totalSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ\n` +
          `<i> - –ó–∞–∫–∞–∑—ã: ${dealsSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</i>\n` +
          `<i> - –î–æ–ø—ã: ${dopsSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</i>\n`;
        return totalSales > 0
          ? { totalSales, text }
          : { totalSales: 0, text: '' };
      });

      const totalSales = msgs.reduce((a, b) => a + b.totalSales, 0);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const summaryText =
        `<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n` +
        `–û–±—â–∞—è —Å—É–º–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö: <b>${totalSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</b>\n` +
        msgs.map((m) => m.text).join('');

      // const chatId = 317401874;
      // await this.telegramService.sendToChat(chatId, summaryText);

      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)
      const admins = [317401874, 368152093];
      for (const admin of admins) {
        await this.telegramService.sendToChat(admin, summaryText);
      }

      this.logger.log('Daily notification sent successfully');
    } catch (error) {
      this.logger.error(`Error in daily summary: ${error.message}`);
    }
  }

  @Cron('0 59 11 * * *')
  //   @Cron('0 13 16 * * *')
  async sendMainDailySummary() {
    this.logger.log('Starting daily data collection and notification...');
    if (this.env === 'development') {
      this.logger.debug(`[dev] skip telegram`);
      return;
    }

    try {
      const yesterday = new Date(new Date().setDate(new Date().getDate() - 1))
        .toISOString()
        .slice(0, 10);

      const groups = await this.prisma.group.findMany({
        where: {
          workSpace: {
            department: 'COMMERCIAL',
          },
        },
        include: {
          deals: {
            where: {
              saleDate: {
                startsWith: yesterday,
              },
              reservation: false,
            },
            include: {
              dops: true,
            },
          },
          adExpenses: {
            where: {
              date: {
                startsWith: yesterday,
              },
            },
          },
        },
      });

      const msgs = groups
        .map((g) => {
          const projectName = g.title;
          const dealsSales = g.deals.reduce((a, b) => a + b.price, 0);
          const dopsSales = g.deals
            .flatMap((d) => d.dops)
            .reduce((a, b) => a + b.price, 0);
          const totalSales = dealsSales + dopsSales;
          const adExpenses = g.adExpenses.reduce((a, b) => a + b.price, 0);
          const drr = totalSales
            ? +((adExpenses / totalSales) * 100).toFixed(2)
            : 0;
          const text =
            `\n<u>${projectName}</u>\n` +
            `–°—É–º–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö: ${totalSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ\n` +
            `<i> - –ó–∞–∫–∞–∑—ã: ${dealsSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</i>\n` +
            `<i> - –î–æ–ø—ã: ${dopsSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</i>\n` +
            `<i> - –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É: ${adExpenses.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</i>\n` +
            `<i> - –î–†–†: ${drr}%\n</i>`;
          return totalSales > 0
            ? { totalSales, text, adExpenses }
            : { totalSales: 0, text: '', adExpenses: 0 };
        })
        .sort((a, b) => b.totalSales - a.totalSales);

      const totalSales = msgs.reduce((a, b) => a + b.totalSales, 0);
      const totalAdExpenses = msgs.reduce((a, b) => a + b.adExpenses, 0);
      const totalDRR = totalSales
        ? +((totalAdExpenses / totalSales) * 100).toFixed(2)
        : 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const summaryText =
        `<b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å</b>\n` +
        `–û–±—â–∞—è —Å—É–º–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö: <b>${totalSales.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</b>\n` +
        `–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É: <b>${totalAdExpenses.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}‚ÇΩ</b>\n` +
        `–î–†–†: <b>${totalDRR}%</b>\n` +
        msgs.map((m) => m.text).join('');
      console.log(summaryText);

      // const chatId = 317401874;
      // await this.telegramService.sendToChat(chatId, summaryText);

      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)
      const admins = [317401874, 368152093];
      // const admins = [317401874];
      for (const admin of admins) {
        await this.telegramService.sendToChat(admin, summaryText);
      }

      this.logger.log('Daily notification sent successfully');
    } catch (error) {
      this.logger.error(`Error in daily summary: ${error.message}`);
    }
  }

  // @Cron('*/5 * * * * *')
  // async test() {
  //   if (this.env === 'development') {
  //     return console.log('dev');
  //   }
  //   console.log('prod');
  // }

  // –ò–º–ø–æ—Ä—Ç ¬´—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å, —Å –Ω–∞–¥—ë–∂–Ω—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞—Ç
  @Cron('5 0 0 * * *', { timeZone: 'Europe/Moscow' })
  async importNewCustomersDaily() {
    if (this.env === 'development') {
      this.logger.debug(`[dev] skip importNewCustomersDaily`);
      return;
    }
    const key = 'dailyCustomers';
    const ymdInMoscow = (d: Date) =>
      new Intl.DateTimeFormat('en-CA', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
      }).format(d);
    const addDaysYmd = (ymd: string, days: number) => {
      const [y, m, d] = ymd.split('-').map((v) => parseInt(v, 10));
      const dt = new Date(Date.UTC(y, m - 1, d));
      dt.setUTCDate(dt.getUTCDate() + days);
      const y2 = dt.getUTCFullYear();
      const m2 = String(dt.getUTCMonth() + 1).padStart(2, '0');
      const d2 = String(dt.getUTCDate()).padStart(2, '0');
      return `${y2}-${m2}-${d2}`;
    };

    try {
      this.logger.log('[dailyCustomers] Start daily customers import');
      await this.notifyAdmins('‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
      // –≤—á–µ—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ
      const now = new Date();
      const todayMsk = ymdInMoscow(now);
      const yesterdayMsk = addDaysYmd(todayMsk, -1);
      const header = `[dailyCustomers] Today MSK=${todayMsk}, yesterday MSK=${yesterdayMsk}`;
      this.logger.log(header);
      await this.notifyAdmins(
        `üïí –î–∞—Ç—ã: —Å–µ–≥–æ–¥–Ω—è ${todayMsk}, –≤—á–µ—Ä–∞ ${yesterdayMsk}`,
      );

      let state = await this.prisma.crmSyncState.findUnique({ where: { key } });
      const stateMsg = `[dailyCustomers] Current state: lastDailyImportDate=${state?.lastDailyImportDate || 'none'}`;
      this.logger.log(stateMsg);

      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
      let startDate = state?.lastDailyImportDate
        ? addDaysYmd(state.lastDailyImportDate, 1)
        : yesterdayMsk;

      // –ù–µ—á–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
      if (startDate > yesterdayMsk) {
        this.logger.log(
          `[dailyCustomers] Nothing to import: startDate=${startDate} > yesterday=${yesterdayMsk}`,
        );
        await this.notifyAdmins(
          `‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: —Å—Ç–∞—Ä—Ç ${startDate} > –≤—á–µ—Ä–∞ ${yesterdayMsk}`,
        );
        return;
      }

      // –ò–¥—ë–º –ø–æ –¥–Ω—è–º –¥–æ –≤—á–µ—Ä–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
      let cur = startDate;
      while (cur <= yesterdayMsk) {
        this.logger.log(`[dailyCustomers] Importing day ${cur}...`);
        await this.notifyAdmins(`‚¨áÔ∏è –ò–º–ø–æ—Ä—Ç –¥–Ω—è ${cur}...`);
        try {
          await this.bluesalesImport.importDay(cur);
          this.logger.log(
            `[dailyCustomers] Day ${cur} import complete, updating sync state...`,
          );
          await this.notifyAdmins(`‚úÖ –ò–º–ø–æ—Ä—Ç –¥–Ω—è ${cur} –∑–∞–≤–µ—Ä—à—ë–Ω`);
        } catch (e: any) {
          this.logger.error(
            `[dailyCustomers] Failed to import day ${cur}: ${e?.message || e}`,
          );
          await this.notifyAdmins(
            `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${cur}: ${e?.message || e}`,
          );
          throw e;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        state = await this.prisma.crmSyncState.upsert({
          where: { key },
          update: { lastDailyImportDate: cur },
          create: { key, lastDailyImportDate: cur },
        });
        const savedMsg = `[dailyCustomers] Sync state saved: lastDailyImportDate=${state.lastDailyImportDate}`;
        this.logger.log(savedMsg);
        await this.notifyAdmins(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.lastDailyImportDate}`);

        cur = addDaysYmd(cur, 1);
      }

      const doneMsg = `Daily customers import done. Last date: ${state?.lastDailyImportDate}`;
      this.logger.log(doneMsg);
      await this.notifyAdmins(`üèÅ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: ${state?.lastDailyImportDate}`);
    } catch (e: any) {
      this.logger.error(`Daily customers import failed: ${e?.message || e}`);
      await this.notifyAdmins(`üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —É–ø–∞–ª: ${e?.message || e}`);
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ 5 –¥–Ω–µ–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∞—Ö
  // –°–µ–π—á–∞—Å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è boardId=3
  @Cron('0 10 3 * * *', { timeZone: 'Europe/Moscow' })
  async autoArchiveOldTasks() {
    try {
      const BOARD_IDS = [3];
      const DAYS = 5;
      const cutoff = new Date(Date.now() - DAYS * 24 * 60 * 60 * 1000);

      const res = await this.prisma.kanbanTask.updateMany({
        where: {
          deletedAt: null,
          archived: false,
          updatedAt: { lt: cutoff },
          boardId: { in: BOARD_IDS },
        },
        data: { archived: true },
      });
      this.logger.log(
        `[autoArchiveOldTasks] cutoff=${cutoff.toISOString()} archived=${res.count} on boards=${BOARD_IDS.join(',')}`,
      );
    } catch (e: any) {
      this.logger.error(
        `[autoArchiveOldTasks] failed: ${e?.message || String(e)}`,
      );
    }
  }
}
