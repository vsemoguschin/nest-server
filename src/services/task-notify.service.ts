// src/notifications/task-notify.service.ts
import { Injectable } from '@nestjs/common';
import { TelegramService } from './telegram.service';
import { PrismaService } from 'src/prisma/prisma.service';

type NotifyOpts = {
  taskId: number;
  actorUserId: number; // –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è
  message: string; // —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —Å—Å—ã–ª–∫–∏)
  link?: string; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  silent?: boolean; // —Ç–∏—Ö–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É Telegram
  includeNewMemberId?: number; // —Å–ø–µ—Ü-—Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å –µ–≥–æ
};

@Injectable()
export class TaskNotifyService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly telegram: TelegramService,
  ) {}

  /** –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥) */
  private buildTaskUrl(boardId: number, taskId: number) {
    const base = 'https://easy-crm.pro';
    return `${base}/boards/${boardId}/task/${taskId}`;
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞.
   * –ï—Å–ª–∏ link –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.
   */
  async notifyParticipants(opts: NotifyOpts) {
    const { taskId, actorUserId, message, link, silent = false } = opts;

    const task = await this.prisma.kanbanTask.findUnique({
      where: { id: taskId },
      select: {
        id: true,
        title: true,
        boardId: true,
        members: { select: { id: true, fullName: true, tg_id: true } },
      },
    });
    if (!task) return;

    const url = link || this.buildTaskUrl(task.boardId, taskId);

    // –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–¥–ª—è —Ç–µ–∫—Å—Ç–∞)
    const actor = await this.prisma.user.findUnique({
      where: { id: actorUserId },
      select: { fullName: true },
    });

    const text =
      `<b>${task.title || '–ó–∞–¥–∞—á–∞'}</b>\n` +
      (actor?.fullName ? `${actor.fullName}\n` : '') +
      `${message}\n` +
      `<a href="${url}">–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</a>`;

    // –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å tg_id, –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    // const targets = task.members.filter(
    //   (u) => u.id !== actorUserId && typeof u.tg_id === 'number' && u.tg_id > 0,
    // );

    await Promise.allSettled(
      task.members.map((u) => this.telegram.sendToChat(u.tg_id!, text, silent)),
    );
  }

  /**
   * –û—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É (–Ω–æ–≤–æ–º—É) —É—á–∞—Å—Ç–Ω–∏–∫—É:
   * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∑–∞–¥–∞—á–µ.
   */
  async notifyNewMember(
    taskId: number,
    memberUserId: number,
    actorUserId: number,
  ) {
    const task = await this.prisma.kanbanTask.findUnique({
      where: { id: taskId },
      select: {
        id: true,
        title: true,
        boardId: true,
      },
    });
    if (!task) return;

    const url = this.buildTaskUrl(task.boardId, taskId);

    const [actor, member] = await Promise.all([
      this.prisma.user.findUnique({
        where: { id: actorUserId },
        select: { fullName: true },
      }),
      this.prisma.user.findUnique({
        where: { id: memberUserId },
        select: { fullName: true, tg_id: true },
      }),
    ]);

    if (!member?.tg_id) return;

    const text =
      `üóÇ <b>${task.title || '–ó–∞–¥–∞—á–∞'}</b>\n` +
      `üëã –í–∞—Å –¥–æ–±–∞–≤–∏–ª(–∞) ${actor?.fullName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
      `üîó <a href="${url}">–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É</a>`;

    await this.telegram.sendToChat(member.tg_id, text);
  }

  
}
